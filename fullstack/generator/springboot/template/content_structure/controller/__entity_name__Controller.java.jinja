// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file
{% set group_path = group_name + '.' + app_name | lower %}
package {{ group_path }}.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;
import {{ group_path }}.service.{{ entity.name }}Service;
import {{ group_path }}.dto.{{ entity.name }}DTO;
import {{ group_path }}.dto.{{ entity.name }}DetailsDTO;
import java.util.List;
{% for api in apis %}
    {% if api.apiPath | lower == entity.name | lower %}
    	{% for endpoint in api.requests %}
            {% if endpoint.returnValue.typeOfType != 'SimpleType' %}
import {{ group_path }}.dto.{{endpoint.returnValue.type |format_type}};
            {% endif %}
            {% if endpoint.bodyParam and endpoint.bodyParam.typeOfType != 'SimpleType' %}
import {{ group_path }}.dto.{{endpoint.bodyParam.type | format_type}};
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}

{% set service = (entity.name | lower_first_str) + 'Service' %}

@CrossOrigin
@RestController
@RequestMapping( path = "/{{ entity.name | lower_first_str }}")
public class {{ entity.name }}Controller {
    @Autowired
    private {{ entity.name }}Service {{ service }};


    @GetMapping(path="/{pageNo}/{pageSize}")
    public Page<{{ entity.name }}DTO> getAllPaged(@PathVariable int pageNo, @PathVariable int pageSize) {
        return {{ service }}.getAll(pageNo, pageSize);
    }

    @GetMapping(path="/all")
    public List<{{ entity.name }}DTO> getAll() {
        return {{ service }}.getAll();
    }

    @GetMapping(path="/{id}")
    public {{ entity.name }}DTO getById(@PathVariable Long id) {
        return {{ service }}.getById(id);
    }

    @GetMapping(path="/details/{id}")
    public {{ entity.name }}DetailsDTO getDetailsById(@PathVariable Long id) {
        return {{ service }}.getDetailsById(id);
    }

    @PostMapping()
    public {{ entity.name }}DetailsDTO create(@RequestBody {{ entity.name }}DetailsDTO dto) {
        return {{ service }}.create(dto);
    }

    @PutMapping()
    public {{ entity.name }}DetailsDTO update(@RequestBody {{ entity.name }}DetailsDTO dto) {
        return {{ service }}.update(dto);
    }

    @DeleteMapping(path = "/{id}")
    public void delete(@PathVariable Long id) {
        {{ service }}.deleteById(id);
    }


{% for api in apis %}
    {% if  api.apiPath | lower == entity.name | lower %}
    	{% for endpoint in api.requests %}
            {% set ret_type = endpoint.returnValue.type | format_type %}
            {% if endpoint.pathParam %}
                {% set pp_type = endpoint.pathParam.type | format_type %}
                {% set pp_name = endpoint.pathParam.name  %}
                {% set pp_def = '@PathVariable ' + pp_type + ' ' + pp_name  %}
            {% endif %}
            {% if endpoint.bodyParam %}
                {% set bp_type = endpoint.bodyParam.type | format_type %}
                {% set bp_name = 'dto'  %}
                {% set bp_def = '@RequestBody ' + bp_type + ' ' + bp_name %}
            {% endif %}
            {% if endpoint.pathParam and endpoint.bodyParam %}
                {% set separator = ', ' %}
            {% endif %}
    @{{ endpoint.methodType | capitalize }}Mapping(path = "/{{ endpoint.methodPath }}")
    public {{ret_type}} {{ endpoint.methodPath }}({{pp_def}}{{ separator }}{{bp_def}}) {
        return {{ service }}.{{ endpoint.methodPath }}({{ pp_name }}{{ separator }}{{bp_name}});
    }
        {% endfor %}
    {% endif %}
{% endfor %}
}
