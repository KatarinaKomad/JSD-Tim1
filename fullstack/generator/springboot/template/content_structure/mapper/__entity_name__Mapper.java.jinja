// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file

package {{ group_name }}.{{ app_name | lower }}.mapper;

import {{ group_name }}.{{ app_name | lower }}.dto.{{ entity.name }}DTO;
import {{ group_name }}.{{ app_name | lower }}.dto.{{ entity.name }}DetailsDTO;
import {{ group_name }}.{{ app_name | lower }}.model.{{ entity.name }};

import java.util.List;

public class {{ entity.name }}Mapper {
    public static {{ entity.name }}DTO toDTO({{ entity.name }} entity){
        return entity == null ? null :
                {{ entity.name }}DTO.builder()
                        .id(entity.getId())
                        {% for property in entity.properties %}
                            {% if not property.cardinality %}
                        .{{ property.name }}(entity.get{{ property.name | capitalize_str }}())
                            {% endif %}
                        {% endfor %}
                        .build();
    }

    public static {{ entity.name }}DetailsDTO toDetailsDTO({{ entity.name }} entity){
        return entity == null ? null :
                {{ entity.name }}DetailsDTO.builder()
                        .id(entity.getId())
                        {% for property in entity.properties %}
                            {% if property.cardinality %}
                                 {% if property.cardinality == '@*..*' or property.cardinality == '@1..*' %}
                        .{{ property.name }}(entity.get{{ property.name | capitalize_str }}() == null ? null : {{ property.type.name }}Mapper.toDTOs(entity.get{{ property.name | capitalize_str }}()))
                                {% else %}
                        .{{ property.name }}(entity.get{{ property.name | capitalize_str }}() == null ? null : {{ property.type.name }}Mapper.toDTO(entity.get{{ property.name | capitalize_str }}()))
                                {% endif %}
                            {% else %}
                        .{{ property.name }}(entity.get{{ property.name | capitalize_str }}())
                            {% endif %}
                        {% endfor %}
                        .build();
    }

    public static List<{{ entity.name }}DTO> toDTOs(List<{{ entity.name }}> entities) {
        return entities.stream().map({{ entity.name }}Mapper::toDTO).toList();
    }
    public static List<{{ entity.name }}DetailsDTO> toDetailDTOs(List<{{ entity.name }}> entities) {
        return entities.stream().map({{ entity.name }}Mapper::toDetailsDTO).toList();
    }
}
