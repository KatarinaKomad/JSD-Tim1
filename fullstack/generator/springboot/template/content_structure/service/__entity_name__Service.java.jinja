// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file
{% set group_path = group_name + '.' + app_name | lower %}
package {{ group_path }}.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.persistence.EntityManager;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;

import {{ group_path }}.exception.NotFoundException;
import {{ group_path }}.dto.{{ entity.name }}DetailsDTO;
import {{ group_path }}.dto.{{ entity.name }}DTO;
import {{ group_path }}.model.{{ entity.name }};
import {{ group_path }}.mapper.{{ entity.name }}Mapper;
import {{ group_path }}.repository.{{ entity.name }}Repository;
{% for property in entity.properties %}
    {% if property.cardinality %}
import {{ group_path }}.model.{{ property.type.name }};
import {{ group_path }}.dto.{{property.type.name}}DTO;
    {% endif %}
{% endfor %}
{% for api in apis %}
    {% if api.apiPath | lower == entity.name | lower %}
    	{% for endpoint in api.requests %}
            {% if endpoint.returnValue.typeOfType != 'SimpleType' %}
import {{ group_path }}.dto.{{endpoint.returnValue.type |format_type}};
            {% endif %}
            {% if endpoint.bodyParam and endpoint.bodyParam.typeOfType != 'SimpleType' %}
import {{ group_path }}.dto.{{endpoint.bodyParam.type | format_type}};
            {% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}
{% set e_var_name =  (entity.name | lower_first_str ) %}
{% set repo_name = e_var_name + 'Repository' %}

@Service
public class {{ entity.name }}Service {

    private static final Logger logger = LoggerFactory.getLogger({{ entity.name }}Service.class);

    @Autowired
    private {{ entity.name }}Repository {{ repo_name }};
    @Autowired
    private EntityManager entityManager;

    public {{ entity.name }} findById(Long labelId) {
        return {{ repo_name }}.findById(labelId).orElseThrow(()->new NotFoundException("{{ entity.name }} not found."));
    }
    public {{ entity.name }}DTO getById(Long labelId) {
        return {{ entity.name }}Mapper.toDTO(findById(labelId));
    }
    public {{ entity.name }}DetailsDTO getDetailsById(Long labelId) {
        return {{ entity.name }}Mapper.toDetailsDTO(findById(labelId));
    }

    public List<{{ entity.name }}DTO> getAll() {
        List<{{ entity.name }}> all = {{ repo_name }}.findAll();
        return {{ entity.name }}Mapper.toDTOs(all);
    }
    public Page<{{ entity.name }}DTO> getAll(int pageNum, int pageSize) {
        Pageable pageable = PageRequest.of(pageNum, pageSize);
        Page<{{ entity.name }}> pagedResult = {{repo_name}}.findAll(pageable);
        return new PageImpl<>({{ entity.name }}Mapper.toDTOs(pagedResult.getContent()), pageable, pagedResult.getTotalElements());
    }

    public {{ entity.name }} save({{ entity.name }} {{ e_var_name }}){
        try {
            return {{ repo_name }}.save({{ e_var_name }});
        } catch (Exception e){
            e.printStackTrace();
            logger.error("Error saving {{ e_var_name }} {}", {{ e_var_name }}.getId());
            return null;
        }
    }
    public void deleteById(Long id) {
        try {
            {{ repo_name }}.deleteById(id);
        } catch (Exception e){
            e.printStackTrace();
            logger.error("Error deleting {{ e_var_name }} {}", id);
        }
    }
    public void delete({{ entity.name }} {{ e_var_name }}) {
        try {
            {{ repo_name }}.delete({{ e_var_name }});
        } catch (Exception e){
            e.printStackTrace();
            logger.error("Error deleting {{ e_var_name }} {}", {{ e_var_name }}.getId());
        }
    }

    public {{ entity.name }}DetailsDTO update({{ entity.name }}DetailsDTO dto){
        {{ entity.name }} {{ e_var_name }} = findById(dto.getId());
{% for property in entity.properties %}
    {% set p_name_cap = (property.name | capitalize_str) %}
    {% set p_class_name = property.type.name %}
    {% set owner_namespace = namespace(owner_cap='') %}
    {% for all_e in entities %}
        {% if all_e.name == property.type.name %}
            {% for all_p in all_e.properties %}
                {% if all_p.cardinality == '@*..1' or all_p.cardinality == '@*..*' %}
                     {% set owner_namespace.owner_cap = all_p.name | capitalize_str %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {% if not property.cardinality %}
        {{e_var_name}}.set{{p_name_cap}}(dto.get{{p_name_cap}}());
    {% elif property.cardinality == '@1..1' or property.cardinality == '@*..1' %}
        {{ e_var_name }}.set{{ p_name_cap }}(dto.get{{p_name_cap}}() == null ? null :
            entityManager.getReference({{p_class_name}}.class, dto.get{{p_name_cap}}().getId())
        );
    {% else %}
        {% if owner_namespace.owner_cap == '' %}
        if(dto.get{{p_name_cap}}() != null) {
            List<{{p_class_name}}> pList = new ArrayList<>();
            for ({{p_class_name}}DTO pDTO: dto.get{{p_name_cap}}()) {
                pList.add(entityManager.getReference({{p_class_name}}.class, pDTO.getId()));
            }
            {{e_var_name}}.set{{p_name_cap}}(pList);
        }
        else
            {{e_var_name}}.set{{p_name_cap}}(null);
        {% else %}
            {% if property.cardinality == '@*..*' %}
        for ({{p_class_name}} pDTO : {{e_var_name}}.get{{p_name_cap}}()) {
            List<{{entity.name}}> pList = pDTO.get{{owner_namespace.owner_cap}}();
            pList.remove({{e_var_name}});
            pDTO.set{{owner_namespace.owner_cap}}(pList);
            entityManager.merge(pDTO);
        }
        if(dto.get{{p_name_cap}}() != null) {
            for ({{p_class_name}}DTO pDTO: dto.get{{p_name_cap}}()) {
                {{p_class_name}} tempEl = entityManager.getReference({{p_class_name}}.class, pDTO.getId());
                List<{{entity.name}}> tempList = tempEl.get{{owner_namespace.owner_cap}}();
                tempList.add({{e_var_name}});
                tempEl.set{{owner_namespace.owner_cap}}(tempList);
                entityManager.merge(tempEl);
            }
        }
            {% elif property.cardinality == '@1..*' %}
        for ({{p_class_name}} pDTO: {{e_var_name}}.get{{p_name_cap}}()) {
            pDTO.set{{owner_namespace.owner_cap}}(null);
            entityManager.merge(pDTO);
        }
        if(dto.get{{p_name_cap}}() != null) {
            for ({{p_class_name}}DTO pDTO: dto.get{{p_name_cap}}()) {
                {{p_class_name}} tempEl = entityManager.getReference({{p_class_name}}.class, pDTO.getId());
                tempEl.set{{owner_namespace.owner_cap}}({{e_var_name}});
                entityManager.merge(tempEl);
            }
        }
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}

        return {{ entity.name }}Mapper.toDetailsDTO(save({{ e_var_name }}));
    }


    public {{ entity.name }}DetailsDTO create({{ entity.name }}DetailsDTO dto){
        {{entity.name}} {{e_var_name}} = new {{entity.name}}();

{% for property in entity.properties %}
    {% set p_name_cap = (property.name | capitalize_str) %}
    {% set p_class_name = property.type.name %}
    {% set owner_namespace = namespace(owner_cap='') %}
    {% for all_e in entities %}
        {% if all_e.name == property.type.name %}
            {% for all_p in all_e.properties %}
                {% if all_p.cardinality == '@*..1' or all_p.cardinality == '@*..*' %}
                     {% set owner_namespace.owner_cap = all_p.name | capitalize_str %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {% if not property.cardinality %}
        {{e_var_name}}.set{{p_name_cap}}(dto.get{{p_name_cap}}());
    {% elif property.cardinality == '@1..1' or property.cardinality == '@*..1'%}
        {{ e_var_name }}.set{{ p_name_cap }}(dto.get{{p_name_cap}}() == null ? null :
            entityManager.getReference({{p_class_name}}.class, dto.get{{p_name_cap}}().getId())
        );
    {% else %}
        {% if owner_namespace.owner_cap == '' %}
        if(dto.get{{p_name_cap}}() != null) {
            List<{{p_class_name}}> pList = new ArrayList<>();
            for ({{p_class_name}}DTO pDTO: dto.get{{p_name_cap}}()) {
                pList.add(entityManager.getReference({{p_class_name}}.class, pDTO.getId()));
            }
            {{e_var_name}}.set{{p_name_cap}}(pList);
        }
        else
            {{e_var_name}}.set{{p_name_cap}}(null);
        {% endif %}
	{% endif %}
{% endfor %}
        save({{e_var_name}});

{% for property in entity.properties %}
    {% set p_name_cap = (property.name | capitalize_str) %}
    {% set p_class_name = property.type.name %}
    {% set owner_namespace = namespace(owner_cap='') %}
    {% for all_e in entities %}
        {% if all_e.name == property.type.name %}
            {% for all_p in all_e.properties %}
                {% if all_p.cardinality == '@*..1' or all_p.cardinality == '@*..*' %}
                     {% set owner_namespace.owner_cap = all_p.name | capitalize_str %}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {% if owner_namespace.owner_cap != '' %}
        {% if property.cardinality == '@*..*' %}
        if(dto.get{{p_name_cap}}() != null) {
            for ({{p_class_name}}DTO pDTO: dto.get{{p_name_cap}}()) {
                {{p_class_name}} tempEl = entityManager.getReference({{p_class_name}}.class, pDTO.getId());
                List<{{entity.name}}> tempList = tempEl.get{{owner_namespace.owner_cap}}();
                tempList.add({{e_var_name}});
                tempEl.set{{owner_namespace.owner_cap}}(tempList);
                entityManager.merge(tempEl);
            }
        }
        {% elif property.cardinality == '@1..*' %}
        if(dto.get{{p_name_cap}}() != null) {
            for ({{p_class_name}}DTO pDTO: dto.get{{p_name_cap}}()) {
                {{p_class_name}} tempEl = entityManager.getReference({{p_class_name}}.class, pDTO.getId());
                tempEl.set{{owner_namespace.owner_cap}}({{e_var_name}});
                entityManager.merge(tempEl);
            }
        }
        {% endif %}
    {% endif %}
{% endfor %}
        return {{ entity.name }}Mapper.toDetailsDTO({{e_var_name }});
    }


{% for api in apis %}
    {% if  api.apiPath | lower == entity.name | lower %}
    	{% for endpoint in api.requests %}
            {% set ret_type = endpoint.returnValue.type | format_type %}
            {% if endpoint.pathParam %}
                {% set pp_type = endpoint.pathParam.type | format_type %}
                {% set pp_name = endpoint.pathParam.name  %}
                {% set pp_def = pp_type + ' ' + pp_name  %}
            {% endif %}
            {% if endpoint.bodyParam %}
                {% set bp_type = endpoint.bodyParam.type | format_type %}
                {% set bp_def = bp_type + ' dto' %}
            {% endif %}
            {% if endpoint.pathParam and endpoint.bodyParam %}
                {% set separator = ', ' %}
            {% endif %}
    public {{ret_type}} {{endpoint.methodPath}}({{pp_def}}{{ separator }}{{bp_def}}) {
        throw new UnsupportedOperationException("Method not implemented.");
    }
        {% endfor %}
    {% endif %}
{% endfor %}
}