// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file
{% set group_path = group_name + '.' + app_name | lower %}
package {{ group_path }}.config;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import {{ group_path }}.exception.InvalidAccessTokenException;

{% if 'user' in entity_names %}
import {{ group_path }}.model.User;
{% endif %}

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.time.Instant;
import java.util.Date;
import java.lang.UnsupportedOperationException;


@Service
public class TokenProvider {
    /**
     * This class is used for JWT token handling, but its main method
     * generateToken(User user) will not be implemented if you don't define 
     * User entity in your .fs file
     */

    @Value("${app.auth.appName}")
    private String appName;

    @Value("${app.auth.tokenExpirationSeconds}")
    private Integer tokenExpirationSeconds;

    @Value("${app.auth.tokenSecret}")
    private String tokenSecret;

    {% if 'user' in entity_names %}
    public String generateToken(String email) {
        Instant now = Instant.now();
        Instant expiresAt = now.plusSeconds(tokenExpirationSeconds);

        return Jwts.builder()
                .setIssuer(appName)
                .setSubject(email)
                .setAudience("web")
                .setIssuedAt(Date.from(now))
                .setExpiration(Date.from(expiresAt))
                .signWith(getKey())
                .compact();
    }
    {% else %}
    public String generateToken() throws UnsupportedOperationException {
        throw new UnsupportedOperationException("This method could not be generated, because you did not define User entity");
    }
    {% endif %}

    public String readTokenFromRequest(HttpServletRequest request) {
        String authHeader = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (StringUtils.hasLength(authHeader) && authHeader.startsWith("Bearer "))
            return authHeader.substring(7);

        return null;
    }

    public String getUsernameFromToken(String token) {
        try {
            return readClaims(token).getSubject();
        } catch (ExpiredJwtException ex) {
            throw new InvalidAccessTokenException("Token expired!");
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public Date getExpirationDateFromToken(String token) {
        try {
            return readClaims(token).getExpiration();
        } catch (ExpiredJwtException ex) {
            throw new InvalidAccessTokenException("Token expired!");
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public Claims readClaims(String token) {
        JwtParser parser = Jwts.parserBuilder().setSigningKey(getKey()).build();
        return parser.parseClaimsJws(token).getBody();
    }

    private Key getKey() {
        byte[] keyBytes = tokenSecret.getBytes(StandardCharsets.UTF_8);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = getUsernameFromToken(token);
        return username != null && username.equals(userDetails.getUsername());
    }

}
