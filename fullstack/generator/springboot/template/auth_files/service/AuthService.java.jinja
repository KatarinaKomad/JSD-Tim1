// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file
{% set group_path = group_name + '.' + app_name | lower %}
package {{ group_path }}.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import {{ group_path }}.dto.request.LoginRequest;
import {{ group_path }}.dto.request.RegistrationRequest;
import {{ group_path }}.dto.response.TokenResponse;
import {{ group_path }}.exception.AlreadyExistsException;
import {{ group_path }}.exception.NotFoundException;
{% set user_entity_found = false %}
{% for e in entities %}
    {% if e.name == User %}
        {% set user_entity_found = true %}
import {{ group_path }}.model.User;
    {% endif %}
{% endfor %}
import {{ group_path }}.config.TokenProvider;
import {{ group_path }}.service.UserService;

import java.util.Base64;
import java.util.Random;
import java.lang.UnsupportedOperationException;


@Service
public class AuthService {

    {% if user_entity_found %}
    @Autowired
    private TokenProvider tokenProvider;

    @Autowired
    private UserService userService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public void register(RegistrationRequest registrationRequest) throws AlreadyExistsException {
        try {
            User user = userService.getUserByEmail(registrationRequest.getEmail());
            throw new AlreadyExistsException("User with given email already exists!");
        } catch (NotFoundException e) {
            User user = User.builder()
                        .email(registrationRequest.getEmail())
                        .fullName(registrationRequest.getFullName())
                        .password(passwordEncoder.encode(registrationRequest.getPassword()))
                        .build();
            userService.save(user);
        }            
    }

    public TokenResponse login(LoginRequest loginRequest) throws NotFoundException, BadCredentialsException {
        User user = userService.getUserByEmail(loginRequest.getEmail());
        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            throw new BadCredentialsException();
        }

        String accessToken = tokenProvider.generateToken(authentication);
        Long expiresAt = tokenProvider.getExpirationDateFromToken(accessToken).getTime();
        return new TokenResponse(accessToken, expiresAt);
    }
    {% else %}
    public void register(RegistrationRequest registrationRequest) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("This method could not be generated, because you did not define User entity");
    }

    public TokenResponse login(LoginRequest loginRequest) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("This method could not be generated, because you did not define User entity");
    }
    {% endif %}
}