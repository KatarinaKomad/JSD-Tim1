// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file
{% set group_path = group_name + '.' + app_name | lower %}
package {{ group_path }}.controller;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import {{ group_path }}.dto.request.LoginRequest;
import {{ group_path }}.dto.request.RegistrationRequest;
import {{ group_path }}.dto.response.TokenResponse;
import {{ group_path }}.service.AuthService;

@CrossOrigin
@RestController
@RequestMapping(path = "/auth")
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            TokenResponse token = authService.login(loginRequest);
            return ResponseEntity.ok(token);
        } catch (NotFoundException | BadCredentialsException e) {
            return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.UNAUTHORIZED);
        } catch (Exception e){
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    @PostMapping("/register")
    public ResponseEntity<?> register(@Valid @RequestBody RegistrationRequest registrationRequest) {
        try {
            authService.register(registrationRequest);
            return ResponseEntity.ok().build();
        } catch (AlreadyExistsException e) {
            return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.BAD_REQUEST);
        } catch (Exception e){
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

}
