// Autogenerated from {{ self._TemplateReference__context.name | format_template_name }} file

package {{ group_name }}.{{ app_name | lower }}.config;


{#import org.springframework.security.access.AccessDeniedException;#}
{#import org.springframework.security.core.AuthenticationException;#}
{#import uns.ac.rs.uks.apiResponse.ResponseError;#}
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import {{ group_name }}.{{ app_name | lower }}.exception.AlreadyExistsException;
{#import {{ group_name }}.{{ app_name | lower }}.exception.NotAllowedException;#}
import {{ group_name }}.{{ app_name | lower }}.exception.NotFoundException;
import org.springframework.security.authentication.BadCredentialsException;
import {{ group_name }}.{{ app_name | lower }}.exception.InvalidAccessTokenException;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
@Slf4j
public class ControllerAdvisor {

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<String> handleValidationException(MethodArgumentNotValidException e) {
        Map<String, String> errors = new HashMap<>();

        e.getBindingResult().getFieldErrors().forEach(error ->
            errors.put(error.getField(), error.getDefaultMessage())
        );

        e.getBindingResult().getGlobalErrors().forEach(error ->
            errors.put(error.getObjectName(), error.getDefaultMessage())
        );

        return new ResponseEntity<>(String.join(", ", errors.values()), HttpStatus.BAD_REQUEST);
    }

{#    @ResponseStatus(HttpStatus.FORBIDDEN)#}
{#    @ExceptionHandler(AccessDeniedException.class)#}
{#    public ResponseEntity<String> accessDeniedException(Exception e) {#}
{#        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.FORBIDDEN);#}
{#    }#}
{#    @ResponseStatus(HttpStatus.UNAUTHORIZED)#}
{#    @ExceptionHandler(AuthenticationException.class)#}
{#    public ResponseEntity<String> authenticationException(Exception e) {#}
{#        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.UNAUTHORIZED);#}
{#    }#}

    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<String> BadCredentialsException(Exception e) {
        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.UNAUTHORIZED);
    }

    @ResponseStatus(HttpStatus.NOT_FOUND)
    @ExceptionHandler(NotFoundException.class)
    public ResponseEntity<String> notFoundException(Exception e) {
        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.NOT_FOUND);
    }
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> unknownError(Exception e) {
        e.printStackTrace();
        log.error("Unknown error: {}", e.getLocalizedMessage());
        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.BAD_REQUEST);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(AlreadyExistsException.class)
    public ResponseEntity<String> alreadyExistsException(Exception e) {
        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.BAD_REQUEST);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(UnsupportedOperationException.class)
    public ResponseEntity<String> unsupportedOperationException(Exception e) {
        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.UNAUTHORIZED);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(InvalidAccessTokenException.class)
    public ResponseEntity<String> invalidAccessTokenException(Exception e) {
        return new ResponseEntity<>(e.getLocalizedMessage(), HttpStatus.UNAUTHORIZED);
    }
}
